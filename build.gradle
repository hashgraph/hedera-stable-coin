import groovy.xml.MarkupBuilder
import org.jooq.codegen.GenerationTool

import javax.xml.bind.JAXB

buildscript {
	repositories {
		gradlePluginPortal()
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath "org.glassfish.jaxb:jaxb-runtime:2.3.2"
		classpath "org.postgresql:postgresql:42.2.14"
		classpath "io.github.jklingsporn:vertx-jooq-generate:5.2.0"
	}
}

plugins {
	id 'idea'
	id 'com.github.johnrengelman.shadow' version '6.0.0' apply false
	id "net.ltgt.errorprone" version "1.2.1" apply false
	id "com.github.ben-manes.versions" version "0.29.0" apply false
	id "com.google.protobuf" version "0.8.12" apply false
	id "org.flywaydb.flyway" version "6.5.5"
	id 'nu.studer.jooq' version '5.0.1'

	id "jacoco"
}

allprojects {
	apply plugin: "java"
	apply plugin: "idea"
	apply plugin: "net.ltgt.errorprone"
	apply plugin: "com.github.ben-manes.versions"

	sourceCompatibility = 14
	targetCompatibility = 14

	repositories {
		jcenter()
	}

	dependencies {
		implementation 'com.google.guava:guava:29.0-jre'

		// https://github.com/google/error-prone
		// https://errorprone.info/
		errorprone "com.google.errorprone:error_prone_core:2.4.0"
		compileOnly "com.google.errorprone:error_prone_annotations:2.4.0"

		// https://github.com/uber/NullAway
		errorprone "com.uber.nullaway:nullaway:0.7.9"

		// https://github.com/eclipse-ee4j/common-annotations-api
		implementation "jakarta.annotation:jakarta.annotation-api:2.0.0-RC1"
	}

	tasks.withType(JavaCompile).configureEach {
		options.encoding = "UTF-8"

		options.errorprone {
			// https://github.com/uber/NullAway
			warn("NullAway")
			option("NullAway:AnnotatedPackages", "com.hedera.hashgraph.stablecoin")
			option("NullAway:TreatGeneratedAsUnannotated", "true")

			// Enable _all_ error prone checks then selectively disble
			// Checks that are default-disabled are enabled as warnings
			allDisabledChecksAsWarnings = true
			disable("Java7ApiChecker")
			disable("AndroidJdkLibsChecker")
			disable("FieldMissingNullable")
			disable("CatchAndPrintStackTrace")
			disable("ThrowSpecificExceptions")

			// Ignore generated and protobuf code
			disableWarningsInGeneratedCode = true
			excludedPaths = "(.*proto.*)|(.*generated.*)|(.*db.*)"
		}
	}

	jacoco {
		reportsDir = file("$buildDir/jacoco")
		toolVersion = "0.8.5"
	}
}

apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.google.protobuf'

group = "com.hedera.hashgraph.stablecoin.app"
version = "0.2.0"
description = "Hederaâ„¢ Hashgraph Stable Coin"

dependencies {
	implementation 'com.hedera.hashgraph:sdk:1.1.4'
	implementation 'io.github.cdimascio:java-dotenv:5.2.1'
	implementation 'io.grpc:grpc-netty-shaded:1.30.2'
	implementation "io.vertx:vertx-web:3.9.2"
	implementation "io.vertx:vertx-pg-client:3.9.2"
	implementation project(":proto")
	implementation project(":sdk")

	// flyway
	compile "org.flywaydb:flyway-core:7.11.2"

	// jOOQ
	implementation 'org.jooq:jooq:3.13.4'
	implementation 'org.jooq:jooq-meta:3.13.4'
	implementation 'org.postgresql:postgresql:42.2.14'

	// jOOQ database driver
	jooqGenerator 'org.postgresql:postgresql:42.2.14'

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

protobuf {
	generatedFilesBaseDir = "$projectDir/src"
	protoc {
		artifact = "com.google.protobuf:protoc:3.12.4"
	}
	generateProtoTasks {
		all().each { task ->
			task.builtins {
				java {
					option "lite"
				}
			}
		}
	}
}

flyway {

	def dbURL = System.getenv("HSC_DATABASE_URL") ?: "postgresql://localhost:5432/"
	def dbSCHEMA = System.getenv("HSC_POSTGRES_DB") ?: "stable_coin"
	def dbUSER = System.getenv("HSC_DATABASE_USERNAME")
	def dbPASS = System.getenv("HSC_DATABASE_PASSWORD")

	url = "jdbc:${dbURL}${dbSCHEMA}"
	user = "${dbUSER}"
	password = "${dbPASS}"
	locations = ['filesystem:src/main/resources/migrations']
}

task jooqGenerate {
	doLast() {
		def writer = new StringWriter()

		def dbURL = System.getenv("HSC_DATABASE_URL") ?: "postgresql://localhost:5432/"
		def dbSCHEMA = System.getenv("HSC_POSTGRES_DB") ?: "stable_coin"
		def dbUSER = System.getenv("HSC_DATABASE_USERNAME")
		def dbPASS = System.getenv("HSC_DATABASE_PASSWORD")

		new MarkupBuilder(writer)
			.configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.13.0.xsd') {
				jdbc {
					driver('org.postgresql.Driver')
					url("jdbc:${dbURL}${dbSCHEMA}")
					user("${dbUSER}")
					password("${dbPASS}")
				}
				generator {
					name('io.github.jklingsporn.vertx.jooq.generate.classic.ClassicReactiveVertxGenerator')
					database {
						name('org.jooq.meta.postgres.PostgresDatabase')
						inputSchema('public')
					}
					generate([:]) {
						deprecated(false)
						records(false)
						interfaces(false)
						fluentSetters(false)
						pojos(false)
						daos(false)
					}
					target() {
						packageName('com.hedera.hashgraph.stablecoin.app.db')
						directory("$projectDir/src/main/java")
					}
					strategy {
						name('io.github.jklingsporn.vertx.jooq.generate.VertxGeneratorStrategy')
					}
				}
			}

		GenerationTool.generate(
			JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.meta.jaxb.Configuration.class)
		)
	}
}

application {
	mainClassName = 'com.hedera.hashgraph.stablecoin.app.App'
}

jar {
	enabled = false
	manifest {
		attributes 'Main-Class': 'com.hedera.hashgraph.stablecoin.app.App'
	}
}

tasks.shadowJar.configure {
	classifier = null
}

tasks.withType(Test) {
	apply plugin: "jacoco"

	useJUnitPlatform()

	// this task will fail on the first failed test
	failFast = true

	// emit logs per passed or failed test
	testLogging {
		exceptionFormat = 'full'
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}

	// run coverage after the test
	finalizedBy jacocoTestReport
}

task printJacoco {
	doLast {
		def csvFile = file("${buildDir}/reports/jacoco/report.csv")
		InputStream inputFile = new FileInputStream(csvFile)
		String[] lines = inputFile.text.split('\n')
		List<String[]> rows = lines.collect { it.split(',') }

		printf("\nCode Coverage:\n\n")

		for (row in rows) {
			if (row.contains("com.hedera.hashgraph.stablecoin.app.handler") ||
				row.contains("com.hedera.hashgraph.stablecoin.app.handler.arguments") ||
				row.contains("State") ||
				row.contains("TopicListener")
			) {
				printf(row[2] + ":  Instructions: " + (row[4].toInteger() / (row[3].toInteger() + row[4].toInteger())) * 100 + "%%, Branches: ")
				if (row[5].toInteger() + row[6].toInteger() == 0) {
					printf("100%%")
				} else {
					printf((row[6].toInteger() / (row[5].toInteger() + row[6].toInteger()) * 100).toString() + "%%")
				}
				printf("\n")
			}
		}
	}
}

jacocoTestReport {
	// make sure to use any/all test coverage data for  the report
	executionData fileTree(dir: buildDir, include: "jacoco/*.exec")

	// remove generated files from report
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['**/proto/**', '**/db/**'])
		}))
	}

	// configure it so only xml is generated for the report
	reports {
		xml.enabled true
		xml.destination file("$buildDir/reports/jacoco/report.xml")
		html.enabled true
		html.destination file("${buildDir}/reports/jacocoHtml")
		csv.enabled true
		csv.destination file("${buildDir}/reports/jacoco/report.csv")
	}

	// make sure we run all tests before this report is made
	dependsOn tasks.withType(Test)

	finalizedBy printJacoco
}
