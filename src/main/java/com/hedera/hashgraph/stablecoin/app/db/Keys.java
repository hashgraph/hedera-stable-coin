/*
 * This file is generated by jOOQ.
 */
package com.hedera.hashgraph.stablecoin.app.db;


import com.hedera.hashgraph.stablecoin.app.db.tables.AddressTransaction;
import com.hedera.hashgraph.stablecoin.app.db.tables.FlywaySchemaHistory;
import com.hedera.hashgraph.stablecoin.app.db.tables.Transaction;
import com.hedera.hashgraph.stablecoin.app.db.tables.TransactionApproveAllowance;
import com.hedera.hashgraph.stablecoin.app.db.tables.TransactionApproveExternalTransfer;
import com.hedera.hashgraph.stablecoin.app.db.tables.TransactionBurn;
import com.hedera.hashgraph.stablecoin.app.db.tables.TransactionChangeComplianceManager;
import com.hedera.hashgraph.stablecoin.app.db.tables.TransactionChangeEnforcementManager;
import com.hedera.hashgraph.stablecoin.app.db.tables.TransactionChangeSupplyManager;
import com.hedera.hashgraph.stablecoin.app.db.tables.TransactionConstruct;
import com.hedera.hashgraph.stablecoin.app.db.tables.TransactionDecreaseAllowance;
import com.hedera.hashgraph.stablecoin.app.db.tables.TransactionExternalTransfer;
import com.hedera.hashgraph.stablecoin.app.db.tables.TransactionExternalTransferFrom;
import com.hedera.hashgraph.stablecoin.app.db.tables.TransactionFreeze;
import com.hedera.hashgraph.stablecoin.app.db.tables.TransactionIncreaseAllowance;
import com.hedera.hashgraph.stablecoin.app.db.tables.TransactionMint;
import com.hedera.hashgraph.stablecoin.app.db.tables.TransactionProposeOwner;
import com.hedera.hashgraph.stablecoin.app.db.tables.TransactionSetKycPassed;
import com.hedera.hashgraph.stablecoin.app.db.tables.TransactionTransfer;
import com.hedera.hashgraph.stablecoin.app.db.tables.TransactionTransferFrom;
import com.hedera.hashgraph.stablecoin.app.db.tables.TransactionUnfreeze;
import com.hedera.hashgraph.stablecoin.app.db.tables.TransactionUnsetKycPassed;
import com.hedera.hashgraph.stablecoin.app.db.tables.TransactionWipe;

import org.jooq.Record;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>public</code> schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<Record> ADDRESS_TRANSACTION_PKEY = UniqueKeys0.ADDRESS_TRANSACTION_PKEY;
    public static final UniqueKey<Record> FLYWAY_SCHEMA_HISTORY_PK = UniqueKeys0.FLYWAY_SCHEMA_HISTORY_PK;
    public static final UniqueKey<Record> TRANSACTION_PKEY = UniqueKeys0.TRANSACTION_PKEY;
    public static final UniqueKey<Record> TRANSACTION_APPROVE_ALLOWANCE_PKEY = UniqueKeys0.TRANSACTION_APPROVE_ALLOWANCE_PKEY;
    public static final UniqueKey<Record> TRANSACTION_APPROVE_EXTERNAL_TRANSFER_PKEY = UniqueKeys0.TRANSACTION_APPROVE_EXTERNAL_TRANSFER_PKEY;
    public static final UniqueKey<Record> TRANSACTION_BURN_PKEY = UniqueKeys0.TRANSACTION_BURN_PKEY;
    public static final UniqueKey<Record> TRANSACTION_CHANGE_COMPLIANCE_MANAGER_PKEY = UniqueKeys0.TRANSACTION_CHANGE_COMPLIANCE_MANAGER_PKEY;
    public static final UniqueKey<Record> TRANSACTION_CHANGE_ENFORCEMENT_MANAGER_PKEY = UniqueKeys0.TRANSACTION_CHANGE_ENFORCEMENT_MANAGER_PKEY;
    public static final UniqueKey<Record> TRANSACTION_CHANGE_SUPPLY_MANAGER_PKEY = UniqueKeys0.TRANSACTION_CHANGE_SUPPLY_MANAGER_PKEY;
    public static final UniqueKey<Record> TRANSACTION_CONSTRUCT_PKEY = UniqueKeys0.TRANSACTION_CONSTRUCT_PKEY;
    public static final UniqueKey<Record> TRANSACTION_DECREASE_ALLOWANCE_PKEY = UniqueKeys0.TRANSACTION_DECREASE_ALLOWANCE_PKEY;
    public static final UniqueKey<Record> TRANSACTION_EXTERNAL_TRANSFER_PKEY = UniqueKeys0.TRANSACTION_EXTERNAL_TRANSFER_PKEY;
    public static final UniqueKey<Record> TRANSACTION_EXTERNAL_TRANSFER_FROM_PKEY = UniqueKeys0.TRANSACTION_EXTERNAL_TRANSFER_FROM_PKEY;
    public static final UniqueKey<Record> TRANSACTION_FREEZE_PKEY = UniqueKeys0.TRANSACTION_FREEZE_PKEY;
    public static final UniqueKey<Record> TRANSACTION_INCREASE_ALLOWANCE_PKEY = UniqueKeys0.TRANSACTION_INCREASE_ALLOWANCE_PKEY;
    public static final UniqueKey<Record> TRANSACTION_MINT_PKEY = UniqueKeys0.TRANSACTION_MINT_PKEY;
    public static final UniqueKey<Record> TRANSACTION_PROPOSE_OWNER_PKEY = UniqueKeys0.TRANSACTION_PROPOSE_OWNER_PKEY;
    public static final UniqueKey<Record> TRANSACTION_SET_KYC_PASSED_PKEY = UniqueKeys0.TRANSACTION_SET_KYC_PASSED_PKEY;
    public static final UniqueKey<Record> TRANSACTION_TRANSFER_PKEY = UniqueKeys0.TRANSACTION_TRANSFER_PKEY;
    public static final UniqueKey<Record> TRANSACTION_TRANSFER_FROM_PKEY = UniqueKeys0.TRANSACTION_TRANSFER_FROM_PKEY;
    public static final UniqueKey<Record> TRANSACTION_UNFREEZE_PKEY = UniqueKeys0.TRANSACTION_UNFREEZE_PKEY;
    public static final UniqueKey<Record> TRANSACTION_UNSET_KYC_PASSED_PKEY = UniqueKeys0.TRANSACTION_UNSET_KYC_PASSED_PKEY;
    public static final UniqueKey<Record> TRANSACTION_WIPE_PKEY = UniqueKeys0.TRANSACTION_WIPE_PKEY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class UniqueKeys0 {
        public static final UniqueKey<Record> ADDRESS_TRANSACTION_PKEY = Internal.createUniqueKey(AddressTransaction.ADDRESS_TRANSACTION, "address_transaction_pkey", new TableField[] { AddressTransaction.ADDRESS_TRANSACTION.ADDRESS, AddressTransaction.ADDRESS_TRANSACTION.TRANSACTION_TIMESTAMP }, true);
        public static final UniqueKey<Record> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, "flyway_schema_history_pk", new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
        public static final UniqueKey<Record> TRANSACTION_PKEY = Internal.createUniqueKey(Transaction.TRANSACTION, "transaction_pkey", new TableField[] { Transaction.TRANSACTION.TIMESTAMP }, true);
        public static final UniqueKey<Record> TRANSACTION_APPROVE_ALLOWANCE_PKEY = Internal.createUniqueKey(TransactionApproveAllowance.TRANSACTION_APPROVE_ALLOWANCE, "transaction_approve_allowance_pkey", new TableField[] { TransactionApproveAllowance.TRANSACTION_APPROVE_ALLOWANCE.TIMESTAMP }, true);
        public static final UniqueKey<Record> TRANSACTION_APPROVE_EXTERNAL_TRANSFER_PKEY = Internal.createUniqueKey(TransactionApproveExternalTransfer.TRANSACTION_APPROVE_EXTERNAL_TRANSFER, "transaction_approve_external_transfer_pkey", new TableField[] { TransactionApproveExternalTransfer.TRANSACTION_APPROVE_EXTERNAL_TRANSFER.TIMESTAMP }, true);
        public static final UniqueKey<Record> TRANSACTION_BURN_PKEY = Internal.createUniqueKey(TransactionBurn.TRANSACTION_BURN, "transaction_burn_pkey", new TableField[] { TransactionBurn.TRANSACTION_BURN.TIMESTAMP }, true);
        public static final UniqueKey<Record> TRANSACTION_CHANGE_COMPLIANCE_MANAGER_PKEY = Internal.createUniqueKey(TransactionChangeComplianceManager.TRANSACTION_CHANGE_COMPLIANCE_MANAGER, "transaction_change_compliance_manager_pkey", new TableField[] { TransactionChangeComplianceManager.TRANSACTION_CHANGE_COMPLIANCE_MANAGER.TIMESTAMP }, true);
        public static final UniqueKey<Record> TRANSACTION_CHANGE_ENFORCEMENT_MANAGER_PKEY = Internal.createUniqueKey(TransactionChangeEnforcementManager.TRANSACTION_CHANGE_ENFORCEMENT_MANAGER, "transaction_change_enforcement_manager_pkey", new TableField[] { TransactionChangeEnforcementManager.TRANSACTION_CHANGE_ENFORCEMENT_MANAGER.TIMESTAMP }, true);
        public static final UniqueKey<Record> TRANSACTION_CHANGE_SUPPLY_MANAGER_PKEY = Internal.createUniqueKey(TransactionChangeSupplyManager.TRANSACTION_CHANGE_SUPPLY_MANAGER, "transaction_change_supply_manager_pkey", new TableField[] { TransactionChangeSupplyManager.TRANSACTION_CHANGE_SUPPLY_MANAGER.TIMESTAMP }, true);
        public static final UniqueKey<Record> TRANSACTION_CONSTRUCT_PKEY = Internal.createUniqueKey(TransactionConstruct.TRANSACTION_CONSTRUCT, "transaction_construct_pkey", new TableField[] { TransactionConstruct.TRANSACTION_CONSTRUCT.TIMESTAMP }, true);
        public static final UniqueKey<Record> TRANSACTION_DECREASE_ALLOWANCE_PKEY = Internal.createUniqueKey(TransactionDecreaseAllowance.TRANSACTION_DECREASE_ALLOWANCE, "transaction_decrease_allowance_pkey", new TableField[] { TransactionDecreaseAllowance.TRANSACTION_DECREASE_ALLOWANCE.TIMESTAMP }, true);
        public static final UniqueKey<Record> TRANSACTION_EXTERNAL_TRANSFER_PKEY = Internal.createUniqueKey(TransactionExternalTransfer.TRANSACTION_EXTERNAL_TRANSFER, "transaction_external_transfer_pkey", new TableField[] { TransactionExternalTransfer.TRANSACTION_EXTERNAL_TRANSFER.TIMESTAMP }, true);
        public static final UniqueKey<Record> TRANSACTION_EXTERNAL_TRANSFER_FROM_PKEY = Internal.createUniqueKey(TransactionExternalTransferFrom.TRANSACTION_EXTERNAL_TRANSFER_FROM, "transaction_external_transfer_from_pkey", new TableField[] { TransactionExternalTransferFrom.TRANSACTION_EXTERNAL_TRANSFER_FROM.TIMESTAMP }, true);
        public static final UniqueKey<Record> TRANSACTION_FREEZE_PKEY = Internal.createUniqueKey(TransactionFreeze.TRANSACTION_FREEZE, "transaction_freeze_pkey", new TableField[] { TransactionFreeze.TRANSACTION_FREEZE.TIMESTAMP }, true);
        public static final UniqueKey<Record> TRANSACTION_INCREASE_ALLOWANCE_PKEY = Internal.createUniqueKey(TransactionIncreaseAllowance.TRANSACTION_INCREASE_ALLOWANCE, "transaction_increase_allowance_pkey", new TableField[] { TransactionIncreaseAllowance.TRANSACTION_INCREASE_ALLOWANCE.TIMESTAMP }, true);
        public static final UniqueKey<Record> TRANSACTION_MINT_PKEY = Internal.createUniqueKey(TransactionMint.TRANSACTION_MINT, "transaction_mint_pkey", new TableField[] { TransactionMint.TRANSACTION_MINT.TIMESTAMP }, true);
        public static final UniqueKey<Record> TRANSACTION_PROPOSE_OWNER_PKEY = Internal.createUniqueKey(TransactionProposeOwner.TRANSACTION_PROPOSE_OWNER, "transaction_propose_owner_pkey", new TableField[] { TransactionProposeOwner.TRANSACTION_PROPOSE_OWNER.TIMESTAMP }, true);
        public static final UniqueKey<Record> TRANSACTION_SET_KYC_PASSED_PKEY = Internal.createUniqueKey(TransactionSetKycPassed.TRANSACTION_SET_KYC_PASSED, "transaction_set_kyc_passed_pkey", new TableField[] { TransactionSetKycPassed.TRANSACTION_SET_KYC_PASSED.TIMESTAMP }, true);
        public static final UniqueKey<Record> TRANSACTION_TRANSFER_PKEY = Internal.createUniqueKey(TransactionTransfer.TRANSACTION_TRANSFER, "transaction_transfer_pkey", new TableField[] { TransactionTransfer.TRANSACTION_TRANSFER.TIMESTAMP }, true);
        public static final UniqueKey<Record> TRANSACTION_TRANSFER_FROM_PKEY = Internal.createUniqueKey(TransactionTransferFrom.TRANSACTION_TRANSFER_FROM, "transaction_transfer_from_pkey", new TableField[] { TransactionTransferFrom.TRANSACTION_TRANSFER_FROM.TIMESTAMP }, true);
        public static final UniqueKey<Record> TRANSACTION_UNFREEZE_PKEY = Internal.createUniqueKey(TransactionUnfreeze.TRANSACTION_UNFREEZE, "transaction_unfreeze_pkey", new TableField[] { TransactionUnfreeze.TRANSACTION_UNFREEZE.TIMESTAMP }, true);
        public static final UniqueKey<Record> TRANSACTION_UNSET_KYC_PASSED_PKEY = Internal.createUniqueKey(TransactionUnsetKycPassed.TRANSACTION_UNSET_KYC_PASSED, "transaction_unset_kyc_passed_pkey", new TableField[] { TransactionUnsetKycPassed.TRANSACTION_UNSET_KYC_PASSED.TIMESTAMP }, true);
        public static final UniqueKey<Record> TRANSACTION_WIPE_PKEY = Internal.createUniqueKey(TransactionWipe.TRANSACTION_WIPE, "transaction_wipe_pkey", new TableField[] { TransactionWipe.TRANSACTION_WIPE.TIMESTAMP }, true);
    }
}
